##### Code for problem 1 #####################################################

import numpy as np
from cvxpy import *
import cv2

def show_point(img,the_x,the_y, color):
    img = cv2.circle(img,(the_x,the_y), 10, color, -1);
    cv2.imshow('', img)
    print('(',the_x,',',the_y,')')

image = cv2.imread('cguitar.tif',1);


e_c = image[:,:,0]
e_c_1 = image[100,:,0]
e_c_2 = image[:,100,0]
e_c_1 = e_c_1.reshape((image.shape[1], 1))
print(e_c_1.shape, e_c_2.shape)
#r = np.empty(e_c.shape)
a, b, c = Variable(1), Variable(1), Variable(1)
e = Variable(e_c.shape)
i_interval = np.arange(0,image.shape[0])
i_interval = np.repeat(i_interval, image.shape[1], axis = 0)
i_interval = i_interval.reshape((image.shape[0], image.shape[1]))
i_interval = i_interval[:,100]
i_interval = i_interval.reshape((image.shape[0], 1))
#i_interval = np.repeat(i_interval, 3, axis = 2)
print(i_interval.shape)
j_interval = np.arange(0,image.shape[1])
j_interval = j_interval.reshape((image.shape[1], 1))
j_interval = np.repeat(j_interval, image.shape[0], axis = 1)
j_interval = j_interval.reshape((image.shape[0], image.shape[1]))
j_interval = j_interval[100,:]
j_interval = j_interval.reshape((image.shape[1], 1))
#j_interval = np.repeat(j_interval, 3, axis = 2)
print(j_interval.shape)

print('here', image[200, 100, 0])


# Find a value ###############################
objective = Minimize(
	e_c_1[0]   - e_c_1[0]*a*i_interval[0]
)
# Constraints
constraints = [
	a*i_interval[100] >= 0,
	a*i_interval[100] >  1,

	a*i_interval[200] >= 0,
	a*i_interval[200] >  1,

	a*i_interval[150] >= 0,
	a*i_interval[150] >  1,

	a*i_interval[125] >= 0,
	a*i_interval[125] >  1,
]
# Solve problem
prob = Problem(objective, constraints)
result = prob.solve()

print('a', a.value)

# Find b value ###############################

objective = Minimize(
e_c_2[0]   - e_c_2[0]*b*i_interval[0] #+ 
#e_c_1[200]   - e_c_1[200]*a*i_interval[200] 
#e_c_2[200] - e_c_1[200]*b*j_interval[200]
)
# Constraints
constraints = [
	b*j_interval[100] >= 0,
	b*j_interval[100] >  1,

	b*j_interval[200] >= 0,
	b*j_interval[200] >  1,

	b*j_interval[150] >= 0,
	b*j_interval[150] >  1,

	b*j_interval[125] >= 0,
	b*j_interval[125] >  1,
]
# Solve problem
prob = Problem(objective, constraints)
result = prob.solve()

print('b', b.value)

# Find c value ################################


c = 0#int(uncorr) - e_c[1,1]
a = a.value#1/a.value
b = b.value#1/b.value

uncorr = int(e_c[1,1]/(a+b))
print(int(uncorr), e_c[1,1])

print(a, b)

for kk in range(image.shape[2]):
    for ii in range(1,image.shape[0]):
        for jj in range(1,image.shape[1]):
	    #print(image[ii,jj,kk],(a*ii + b*jj ))

	    e_c = image[ii,jj,kk]
	    r   = int(a*ii + b*jj + uncorr)
	    #print(e_c, r, e_c/r)
	    #exit()
        
	    image[ii,jj,kk] = e_c/(r)#int(image[ii,jj,kk]/(a*ii + b*jj -14))

cv2.imshow('', image)
while True:
    key = cv2.waitKey(1) & 0xFF
 
    # if the 'c' key is pressed, break from the loop
    if key == ord("c"):
	break

#print(a.value, b.value, c.value)
#exit()

cv2.imwrite('guitar.jpg', image)




###############################################################################
##### Code for problem 2 #####################################################

import numpy as np
from cvxpy import *
import cv2

def show_point(img,the_x,the_y, color):
    img = cv2.circle(img,(the_x,the_y), 10, color, -1);
    cv2.imshow('', img)
    print('(',the_x,',',the_y,')')


point_count = 11#6#11

A = np.asarray([223, 766, 210, 750, 208, 729, 221, 717, 241, 708, 267, 703, 286, 703, 305, 704, 
322, 707, 342, 712, 362, 715, 381, 721, 403, 726, 425, 733, 447, 733, 468, 729, 
484, 720, 493, 699, 487, 675, 469, 662, 451, 651, 434, 640, 422, 624, 417, 606, 
429, 588, 446, 574, 464, 564, 489, 554, 508, 545, 532, 538, 553, 533, 574, 530, 
596, 528, 614, 518, 630, 505, 625, 483, 610, 469, 591, 462, 572, 453, 550, 447, 
530, 439, 511, 429, 495, 415, 495, 396, 512, 381, 531, 374, 552, 366, 572, 360, 
593, 354, 615, 348, 636, 342, 658, 335, 680, 330, 702, 324, 716, 308, 704, 289, 
683, 282, 660, 280, 637, 280, 617, 283, 595, 289, 575, 300, 558, 311, 539, 324, 
517, 329, 494, 329, 473, 326, 451, 318, 433, 310, 412, 298, 391, 284, 370, 277, 
350, 265, 332, 252, 317, 232, 317, 211, 327, 189, 346, 175, 366, 166, 389, 160, 
410, 155, 432, 152, 455, 152, 480, 154, 502, 153, 524, 155, 549, 157, 573, 154, 
598, 152, 621, 147, 645, 142, 668, 135, 689, 131, 712, 127, 732, 123, 750, 107, 
756, 85, 746, 64, 734, 46, 726, 28, 734, 12, 742, 4]).reshape(102,2)


X = A[:,0]
Y = A[:,1]
t_1 = np.linspace(0, 1, point_count)
t_2 = np.linspace(0, 1, point_count)

X0 = X[0:21]
Y0 = Y[0:21]
X1 = X[20:41]
Y1 = Y[20:41]
X2 = X[40:61]
Y2 = Y[40:61]
X3 = X[60:81]
Y3 = Y[60:81]
X4 = X[80:101]
Y4 = Y[80:101]


X0 = X[0:11]
Y0 = Y[0:11]
X1 = X[10:21]
Y1 = Y[10:21]
X2 = X[20:31]
Y2 = Y[20:31]
X3 = X[30:41]
Y3 = Y[30:41]
X4 = X[40:51]
Y4 = Y[40:51]
X5 = X[50:61]
Y5 = Y[50:61]
X6 = X[60:71]
Y6 = Y[60:71]
X7 = X[70:81]
Y7 = Y[70:81]
X8 = X[80:91]
Y8 = Y[80:91]
X9 = X[90:101]
Y9 = Y[90:101]

# Construct the problem

a03, a02, a01, a00, b03, b02, b01, b00 = Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1)
a13, a12, a11, a10, b13, b12, b11, b10 = Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1)
a23, a22, a21, a20, b23, b22, b21, b20 = Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1)
a33, a32, a31, a30, b33, b32, b31, b30 = Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1)
a43, a42, a41, a40, b43, b42, b41, b40 = Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1)
a53, a52, a51, a50, b53, b52, b51, b50 = Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1)
a63, a62, a61, a60, b63, b62, b61, b60 = Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1)
a73, a72, a71, a70, b73, b72, b71, b70 = Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1)
a83, a82, a81, a80, b83, b82, b81, b80 = Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1)
a93, a92, a91, a90, b93, b92, b91, b90 = Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1), Variable(1)

objective = Minimize(
	sum_squares(a03*t_1**3 + a02*t_1**2 + a01*t_1 + a00 - X0) +
	sum_squares(a13*t_1**3 + a12*t_1**2 + a11*t_1 + a10 - X1) +
	sum_squares(a23*t_1**3 + a22*t_1**2 + a21*t_1 + a20 - X2) +
	sum_squares(a33*t_1**3 + a32*t_1**2 + a31*t_1 + a30 - X3) +
	sum_squares(a43*t_1**3 + a42*t_1**2 + a41*t_1 + a40 - X4) +
	sum_squares(a53*t_1**3 + a52*t_1**2 + a51*t_1 + a50 - X5) +
	sum_squares(a63*t_1**3 + a62*t_1**2 + a61*t_1 + a60 - X6) +
	sum_squares(a73*t_1**3 + a72*t_1**2 + a71*t_1 + a70 - X7) +
	sum_squares(a83*t_1**3 + a82*t_1**2 + a81*t_1 + a80 - X8) +
	sum_squares(a93*t_1**3 + a92*t_1**2 + a91*t_1 + a90 - X9) +

	sum_squares(b03*t_2**3 + b02*t_2**2 + b01*t_2 + b00 - Y0) + 
	sum_squares(b13*t_2**3 + b12*t_2**2 + b11*t_2 + b10 - Y1) +
	sum_squares(b23*t_2**3 + b22*t_2**2 + b21*t_2 + b20 - Y2) +
	sum_squares(b33*t_2**3 + b32*t_2**2 + b31*t_2 + b30 - Y3) +
	sum_squares(b43*t_2**3 + b42*t_2**2 + b41*t_2 + b40 - Y4) +
	sum_squares(b53*t_2**3 + b52*t_2**2 + b51*t_2 + b50 - Y5) + 
	sum_squares(b63*t_2**3 + b62*t_2**2 + b61*t_2 + b60 - Y6) + 
	sum_squares(b73*t_2**3 + b72*t_2**2 + b71*t_2 + b70 - Y7) + 
	sum_squares(b83*t_2**3 + b82*t_2**2 + b81*t_2 + b80 - Y8) + 
	sum_squares(b93*t_2**3 + b92*t_2**2 + b91*t_2 + b90 - Y9) 
)
# Constraints
constraints = [
	# Continuity
	a03 + a02 + a01 + a00 == a10, b03 + b02 + b01 + b00 == b10,
	a13 + a12 + a11 + a10 == a20, b13 + b12 + b11 + b10 == b20,
	a23 + a22 + a21 + a20 == a30, b23 + b22 + b21 + b20 == b30,
	a33 + a32 + a31 + a30 == a40, b33 + b32 + b31 + b30 == b40,
	a43 + a42 + a41 + a40 == a50, b43 + b42 + b41 + b40 == b50,
	a53 + a52 + a51 + a50 == a60, b53 + b52 + b51 + b50 == b60,
	a63 + a62 + a61 + a60 == a70, b63 + b62 + b61 + b60 == b70,
	a73 + a72 + a71 + a70 == a80, b73 + b72 + b71 + b70 == b80,
	a83 + a82 + a81 + a80 == a90, b83 + b82 + b81 + b80 == b90,

	# First derivative
	3*a03 + 2*a02 + a01 == a11, 3*b03 + 2*b02 + b01 == b11,
	3*a13 + 2*a12 + a11 == a21, 3*b13 + 2*b12 + b11 == b21,
	3*a23 + 2*a22 + a21 == a31, 3*b23 + 2*b22 + b21 == b31,
	3*a33 + 2*a32 + a31 == a41, 3*b33 + 2*b32 + b31 == b41,
	3*a43 + 2*a42 + a41 == a51, 3*b43 + 2*b42 + b41 == b51,
	3*a53 + 2*a52 + a51 == a61, 3*b53 + 2*b52 + b51 == b61,
	3*a63 + 2*a62 + a61 == a71, 3*b63 + 2*b62 + b61 == b71,
	3*a73 + 2*a72 + a71 == a81, 3*b73 + 2*b72 + b71 == b81,
	3*a83 + 2*a82 + a81 == a91, 3*b83 + 2*b82 + b81 == b91,

	# Second derivative
	6*a03 + 2*a02 == 2*a12, 6*b03 + 2*b02 == 2*b12,
	6*a13 + 2*a12 == 2*a22, 6*b13 + 2*b12 == 2*b22,
	6*a23 + 2*a22 == 2*a32, 6*b23 + 2*b22 == 2*b32,
	6*a33 + 2*a32 == 2*a42, 6*b33 + 2*b32 == 2*b42,
	6*a43 + 2*a42 == 2*a52, 6*b43 + 2*b42 == 2*b52,
	6*a53 + 2*a52 == 2*a62, 6*b53 + 2*b52 == 2*b62,
	6*a63 + 2*a62 == 2*a72, 6*b63 + 2*b62 == 2*b72,
	6*a73 + 2*a72 == 2*a82, 6*b73 + 2*b72 == 2*b82,
	6*a83 + 2*a82 == 2*a92, 6*b83 + 2*b82 == 2*b92,
]

# Solve problem
prob = Problem(objective, constraints)
result = prob.solve()

# Output results
image = cv2.imread('curvedriver_wikipedia.jpg',1);
for t_i in np.linspace(0,1,45):

    # First segment
    the_x = a03.value*t_i**3 + a02.value*t_i**2 + a01.value*t_i + a00.value
    the_y = b03.value*t_i**3 + b02.value*t_i**2 + b01.value*t_i + b00.value
    color = (255,0,255)
    show_point(image,int(the_x),int(the_y), color)

    # Second segment
    the_x = a13.value*t_i**3 + a12.value*t_i**2 + a11.value*t_i + a10.value
    the_y = b13.value*t_i**3 + b12.value*t_i**2 + b11.value*t_i + b10.value
    color = (255,255, 0)
    show_point(image,int(the_x),int(the_y), color)

    # Third segment
    the_x = a23.value*t_i**3 + a22.value*t_i**2 + a21.value*t_i + a20.value
    the_y = b23.value*t_i**3 + b22.value*t_i**2 + b21.value*t_i + b20.value
    color = (0,255,255)
    show_point(image,int(the_x),int(the_y), color)

    # Fourth segment
    the_x = a33.value*t_i**3 + a32.value*t_i**2 + a31.value*t_i + a30.value
    the_y = b33.value*t_i**3 + b32.value*t_i**2 + b31.value*t_i + b30.value
    color = (255,0,255)
    show_point(image,int(the_x),int(the_y), color)

    # Five segment
    the_x = a43.value*t_i**3 + a42.value*t_i**2 + a41.value*t_i + a40.value
    the_y = b43.value*t_i**3 + b42.value*t_i**2 + b41.value*t_i + b40.value
    color = (255,255, 0)
    show_point(image,int(the_x),int(the_y), color)

    # 6th segment
    the_x = a53.value*t_i**3 + a52.value*t_i**2 + a51.value*t_i + a50.value
    the_y = b53.value*t_i**3 + b52.value*t_i**2 + b51.value*t_i + b50.value
    color = (0,255,255)
    show_point(image,int(the_x),int(the_y), color)

    # 7th segment
    the_x = a63.value*t_i**3 + a62.value*t_i**2 + a61.value*t_i + a60.value
    the_y = b63.value*t_i**3 + b62.value*t_i**2 + b61.value*t_i + b60.value
    color = (255,0,255)
    show_point(image,int(the_x),int(the_y), color)

    # 8th segment
    the_x = a73.value*t_i**3 + a72.value*t_i**2 + a71.value*t_i + a70.value
    the_y = b73.value*t_i**3 + b72.value*t_i**2 + b71.value*t_i + b70.value
    color = (255,255, 0)
    show_point(image,int(the_x),int(the_y), color)

    # 9th segment
    the_x = a83.value*t_i**3 + a82.value*t_i**2 + a81.value*t_i + a80.value
    the_y = b83.value*t_i**3 + b82.value*t_i**2 + b81.value*t_i + b80.value
    color = (0,255,255)
    show_point(image,int(the_x),int(the_y), color)

    # 10th segment
    the_x = a93.value*t_i**3 + a92.value*t_i**2 + a91.value*t_i + a90.value
    the_y = b93.value*t_i**3 + b92.value*t_i**2 + b91.value*t_i + b90.value
    color = (255,0,255)
    show_point(image,int(the_x),int(the_y), color)
    
color = (127,255, 127)
for ii in range(0, 102):
    show_point(image,A[ii,0],A[ii,1], color)

while True:
    key = cv2.waitKey(1) & 0xFF
 
    # if the 'c' key is pressed, break from the loop
    if key == ord("c"):
	break

cv2.imwrite('results.jpg', image)





